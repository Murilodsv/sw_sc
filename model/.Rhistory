met.dt$station = paste0("\'",SC.set$rep[SC.set$find == "<prj.nm>"],"\'")
#--- Order to swap template
met.dt.swap  = met.dt[,swap.met.order]
#--- Add "." to real values
for(c in real.col){
met.dt.swap[,c] = format(as.numeric(met.dt.swap[,c]), nsmall = 1)
}
#--- number of years
l.yr = unique(met.dt.swap$yyyy)
for(yr in l.yr){
yr.lab = substr(as.character(yr),2,4)
write(SC.template,file = paste0(SC.outpath,"\\",SC.outfn,".",yr.lab))
write.fwf(met.dt.swap[met.dt.swap$yyyy == yr,],
file = paste0(SC.outpath,"\\",SC.outfn,".",yr.lab),
sep = ",",
append = T,
colnames = F)
}
#--- Create Meteorological
SC.set.fn = paste0(wd.rsam,"/sim_db/weather/met_control_seq_f1_s1.csv")
met.dt.fn = paste0(wd.rsam,"/sim_db/weather/met_data_f1.csv")
SC.outpath = wd.model
SC.outfn   = "SEQ_F1_S1"
SimMet.SWAP(SC.set.fn,
met.dt.fn,
SC.outpath,
SC.outfn)
rm(SC.set)
SimMet.SWAP(SC.set.fn,
met.dt.fn,
SC.outpath,
SC.outfn)
#--- Template header
SC.template =c(
"* Source of data    : <prj.nm> - <site.nm>",
"* File content      : Input weather file for Swap 3.2 (www.swap.alterra.nl)",
"* File generated by : R-Script ",
"* File generated at : <date_now>",
"station,DD,MM,YYYY,Rad,Tmin,Tmax,Rain,Wind,Hum")
#--- Set Column width and SAMUCA's meteorological variables and order
swap.met.order = c("station","dd","mm","yyyy","srad_kj","tmin","tmax","rain","wind","ea")
real.col = c("srad_kj","tmin","tmax","rain","wind","ea")
#--- include date
SC.template = gsub("<date_now>",format(Sys.Date(), "%d-%b-%Y"),SC.template)
SC.template = gsub("<prj.nm>",SC.set$rep[SC.set$find == "<prj.nm>"],SC.template)
SC.template = gsub("<site.nm>",SC.set$rep[SC.set$find == "<site.nm>"],SC.template)
SimMet.SWAP  = function(SC.set.fn,
met.dt.fn,
SC.outpath,
SC.outfn){
#--------------------------------------------------------#
#------ Create Meteorological File for SAMUCA -----------#
#--------------------------------------------------------#
#   SC.template.fn  Control File Template "Path\\name.ctl"
#   C.set.fn        Control File Settings "Path\\file.csv"
#   SC.outpath      Output Control File Path
#   SC.outfn        Output Control Filename
#
#   -Settings.csv
#   File .csv must contain 7 columns:
#   find      target string on template
#   rep       replacement value
#   justify   justify format (r = right, l = left, c = centre)
#   width     character size of replecement
#   type      type of value (c = character, i = integer, r = real) Note: Logical = character
#   digits    maximun number of digits including character (More info in: ?format())
#   nsmall    minimun number of digits
#--------------------------------------------------------#
#if(missing(SC.template.fn)){stop("Argument SC.template.fn is missing for SimControl function")}
if(missing(SC.set.fn)){stop("Argument SC.set.fn is missing for SimControl function")}
if(missing(SC.outpath)){stop("Argument SC.outpath is missing for SimControl function")}
if(missing(SC.outfn)){stop("Argument SC.outfn is missing for SimControl function")}
#--- Read Template Settings file (csv)
SC.set      = read.csv(SC.set.fn, as.is = T)
#--- Template header
SC.template =c(
"* Source of data    : <prj.nm> - <site.nm>",
"* File content      : Input weather file for Swap 3.2 (www.swap.alterra.nl)",
"* File generated by : R-Script ",
"* File generated at : <date_now>",
"station,DD,MM,YYYY,Rad,Tmin,Tmax,Rain,Wind,Hum")
#--- Set Column width and SAMUCA's meteorological variables and order
swap.met.order = c("station","dd","mm","yyyy","srad_kj","tmin","tmax","rain","wind","ea")
real.col = c("srad_kj","tmin","tmax","rain","wind","ea")
#--- include date
SC.template = gsub("<date_now>",format(Sys.Date(), "%d-%b-%Y"),SC.template)
SC.template = gsub("<prj.nm>",SC.set$rep[SC.set$find == "<prj.nm>"],SC.template)
SC.template = gsub("<site.nm>",SC.set$rep[SC.set$find == "<site.nm>"],SC.template)
#--- Read meteorological data
met.dt      = read.csv(met.dt.fn, as.is = T)
#--- Add project name as station name
met.dt$station = paste0("\'",SC.set$rep[SC.set$find == "<prj.nm>"],"\'")
#--- Order to swap template
met.dt.swap  = met.dt[,swap.met.order]
#--- Add "." to real values
for(c in real.col){
met.dt.swap[,c] = format(as.numeric(met.dt.swap[,c]), nsmall = 1)
}
#--- number of years
l.yr = unique(met.dt.swap$yyyy)
for(yr in l.yr){
yr.lab = substr(as.character(yr),2,4)
write(SC.template,file = paste0(SC.outpath,"\\",SC.outfn,".",yr.lab))
write.fwf(met.dt.swap[met.dt.swap$yyyy == yr,],
file = paste0(SC.outpath,"\\",SC.outfn,".",yr.lab),
sep = ",",
append = T,
colnames = F)
}
}
SimMet.SWAP(SC.set.fn,
met.dt.fn,
SC.outpath,
SC.outfn)
SimMet.SWAP  = function(SC.set.fn,
met.dt.fn,
SC.outpath,
SC.outfn){
#--------------------------------------------------------#
#------ Create Meteorological File for SAMUCA -----------#
#--------------------------------------------------------#
#   SC.template.fn  Control File Template "Path\\name.ctl"
#   C.set.fn        Control File Settings "Path\\file.csv"
#   SC.outpath      Output Control File Path
#   SC.outfn        Output Control Filename
#
#   -Settings.csv
#   File .csv must contain 7 columns:
#   find      target string on template
#   rep       replacement value
#   justify   justify format (r = right, l = left, c = centre)
#   width     character size of replecement
#   type      type of value (c = character, i = integer, r = real) Note: Logical = character
#   digits    maximun number of digits including character (More info in: ?format())
#   nsmall    minimun number of digits
#--------------------------------------------------------#
#if(missing(SC.template.fn)){stop("Argument SC.template.fn is missing for SimControl function")}
if(missing(SC.set.fn)){stop("Argument SC.set.fn is missing for SimControl function")}
if(missing(SC.outpath)){stop("Argument SC.outpath is missing for SimControl function")}
if(missing(SC.outfn)){stop("Argument SC.outfn is missing for SimControl function")}
#--- Read Template Settings file (csv)
SC.set      = read.csv(SC.set.fn, as.is = T)
#--- Template header
SC.template =c(
"* Source of data    : <prj.nm> - <site.nm>",
"* File content      : Input weather file for Swap 3.2 (www.swap.alterra.nl)",
"* File generated by : R-Script ",
"* File generated at : <date_now>",
"station,DD,MM,YYYY,Rad,Tmin,Tmax,Rain,Wind,Hum,etref")
#--- Set Column width and SAMUCA's meteorological variables and order
swap.met.order = c("station","dd","mm","yyyy","srad_kj","tmin","tmax","rain","wind","ea")
real.col = c("srad_kj","tmin","tmax","rain","wind","ea","etref")
#--- include date
SC.template = gsub("<date_now>",format(Sys.Date(), "%d-%b-%Y"),SC.template)
SC.template = gsub("<prj.nm>",SC.set$rep[SC.set$find == "<prj.nm>"],SC.template)
SC.template = gsub("<site.nm>",SC.set$rep[SC.set$find == "<site.nm>"],SC.template)
#--- Read meteorological data
met.dt      = read.csv(met.dt.fn, as.is = T)
#--- Add project name as station name
met.dt$station = paste0("\'",SC.set$rep[SC.set$find == "<prj.nm>"],"\'")
#--- Order to swap template
met.dt.swap  = met.dt[,swap.met.order]
#--- Add "." to real values
for(c in real.col){
met.dt.swap[,c] = format(as.numeric(met.dt.swap[,c]), nsmall = 1)
}
#--- number of years
l.yr = unique(met.dt.swap$yyyy)
for(yr in l.yr){
yr.lab = substr(as.character(yr),2,4)
write(SC.template,file = paste0(SC.outpath,"\\",SC.outfn,".",yr.lab))
write.fwf(met.dt.swap[met.dt.swap$yyyy == yr,],
file = paste0(SC.outpath,"\\",SC.outfn,".",yr.lab),
sep = ",",
append = T,
colnames = F)
}
}
SimMet.SWAP(SC.set.fn,
met.dt.fn,
SC.outpath,
SC.outfn)
#--- Read Template Settings file (csv)
SC.set      = read.csv(SC.set.fn, as.is = T)
#--- Template header
SC.template =c(
"* Source of data    : <prj.nm> - <site.nm>",
"* File content      : Input weather file for Swap 3.2 (www.swap.alterra.nl)",
"* File generated by : R-Script ",
"* File generated at : <date_now>",
"station,DD,MM,YYYY,Rad,Tmin,Tmax,Rain,Wind,Hum,etref")
#--- Set Column width and SAMUCA's meteorological variables and order
swap.met.order = c("station","dd","mm","yyyy","srad_kj","tmin","tmax","rain","wind","ea")
real.col = c("srad_kj","tmin","tmax","rain","wind","ea","etref")
#--- include date
SC.template = gsub("<date_now>",format(Sys.Date(), "%d-%b-%Y"),SC.template)
SC.template = gsub("<prj.nm>",SC.set$rep[SC.set$find == "<prj.nm>"],SC.template)
SC.template = gsub("<site.nm>",SC.set$rep[SC.set$find == "<site.nm>"],SC.template)
#--- Read meteorological data
met.dt      = read.csv(met.dt.fn, as.is = T)
#--- Add project name as station name
met.dt$station = paste0("\'",SC.set$rep[SC.set$find == "<prj.nm>"],"\'")
#--- Order to swap template
met.dt.swap  = met.dt[,swap.met.order]
#--- Add "." to real values
for(c in real.col){
met.dt.swap[,c] = format(as.numeric(met.dt.swap[,c]), nsmall = 1)
}
#--- number of years
l.yr = unique(met.dt.swap$yyyy)
#--- Read Template Settings file (csv)
SC.set      = read.csv(SC.set.fn, as.is = T)
#--- Template header
SC.template =c(
"* Source of data    : <prj.nm> - <site.nm>",
"* File content      : Input weather file for Swap 3.2 (www.swap.alterra.nl)",
"* File generated by : R-Script ",
"* File generated at : <date_now>",
"station,DD,MM,YYYY,Rad,Tmin,Tmax,Rain,Wind,Hum,etref")
#--- Read Template Settings file (csv)
SC.set      = read.csv(SC.set.fn, as.is = T)
#--- Template header
SC.template =c(
"* Source of data    : <prj.nm> - <site.nm>",
"* File content      : Input weather file for Swap 3.2 (www.swap.alterra.nl)",
"* File generated by : R-Script ",
"* File generated at : <date_now>",
"station,DD,MM,YYYY,Rad,Tmin,Tmax,Rain,Wind,Hum,etref")
#--- Set Column width and SAMUCA's meteorological variables and order
swap.met.order = c("station","dd","mm","yyyy","srad_kj","tmin","tmax","rain","wind","ea")
real.col = c("srad_kj","tmin","tmax","rain","wind","ea","etref")
#--- include date
SC.template = gsub("<date_now>",format(Sys.Date(), "%d-%b-%Y"),SC.template)
SC.template = gsub("<prj.nm>",SC.set$rep[SC.set$find == "<prj.nm>"],SC.template)
SC.template = gsub("<site.nm>",SC.set$rep[SC.set$find == "<site.nm>"],SC.template)
#--- Read meteorological data
met.dt      = read.csv(met.dt.fn, as.is = T)
#--- Add project name as station name
met.dt$station = paste0("\'",SC.set$rep[SC.set$find == "<prj.nm>"],"\'")
#--- Order to swap template
met.dt.swap  = met.dt[,swap.met.order]
real.col
met.dt.swap[,c]
met.dt.swap
met.dt.fn
SC.set      = read.csv(SC.set.fn, as.is = T)
#--- Template header
SC.template =c(
"* Source of data    : <prj.nm> - <site.nm>",
"* File content      : Input weather file for Swap 3.2 (www.swap.alterra.nl)",
"* File generated by : R-Script ",
"* File generated at : <date_now>",
"station,DD,MM,YYYY,Rad,Tmin,Tmax,Rain,Wind,Hum,etref")
#--- Set Column width and SAMUCA's meteorological variables and order
swap.met.order = c("station","dd","mm","yyyy","srad_kj","tmin","tmax","rain","wind","ea")
real.col = c("srad_kj","tmin","tmax","rain","wind","ea","etref")
#--- include date
SC.template = gsub("<date_now>",format(Sys.Date(), "%d-%b-%Y"),SC.template)
SC.template = gsub("<prj.nm>",SC.set$rep[SC.set$find == "<prj.nm>"],SC.template)
SC.template = gsub("<site.nm>",SC.set$rep[SC.set$find == "<site.nm>"],SC.template)
#--- Read meteorological data
met.dt      = read.csv(met.dt.fn, as.is = T)
met.dt
#--- Add project name as station name
met.dt$station = paste0("\'",SC.set$rep[SC.set$find == "<prj.nm>"],"\'")
#--- Set Column width and SAMUCA's meteorological variables and order
swap.met.order = c("station","dd","mm","yyyy","srad_kj","tmin","tmax","rain","wind","ea","etref")
real.col = c("srad_kj","tmin","tmax","rain","wind","ea","etref")
#--- include date
SC.template = gsub("<date_now>",format(Sys.Date(), "%d-%b-%Y"),SC.template)
SC.template = gsub("<prj.nm>",SC.set$rep[SC.set$find == "<prj.nm>"],SC.template)
SimMet.SWAP  = function(SC.set.fn,
met.dt.fn,
SC.outpath,
SC.outfn){
#--------------------------------------------------------#
#------ Create Meteorological File for SAMUCA -----------#
#--------------------------------------------------------#
#   SC.template.fn  Control File Template "Path\\name.ctl"
#   C.set.fn        Control File Settings "Path\\file.csv"
#   SC.outpath      Output Control File Path
#   SC.outfn        Output Control Filename
#
#   -Settings.csv
#   File .csv must contain 7 columns:
#   find      target string on template
#   rep       replacement value
#   justify   justify format (r = right, l = left, c = centre)
#   width     character size of replecement
#   type      type of value (c = character, i = integer, r = real) Note: Logical = character
#   digits    maximun number of digits including character (More info in: ?format())
#   nsmall    minimun number of digits
#--------------------------------------------------------#
#if(missing(SC.template.fn)){stop("Argument SC.template.fn is missing for SimControl function")}
if(missing(SC.set.fn)){stop("Argument SC.set.fn is missing for SimControl function")}
if(missing(SC.outpath)){stop("Argument SC.outpath is missing for SimControl function")}
if(missing(SC.outfn)){stop("Argument SC.outfn is missing for SimControl function")}
#--- Read Template Settings file (csv)
SC.set      = read.csv(SC.set.fn, as.is = T)
#--- Template header
SC.template =c(
"* Source of data    : <prj.nm> - <site.nm>",
"* File content      : Input weather file for Swap 3.2 (www.swap.alterra.nl)",
"* File generated by : R-Script ",
"* File generated at : <date_now>",
"station,DD,MM,YYYY,Rad,Tmin,Tmax,Rain,Wind,Hum,etref")
#--- Set Column width and SAMUCA's meteorological variables and order
swap.met.order = c("station","dd","mm","yyyy","srad_kj","tmin","tmax","rain","wind","ea","etref")
real.col = c("srad_kj","tmin","tmax","rain","wind","ea","etref")
#--- include date
SC.template = gsub("<date_now>",format(Sys.Date(), "%d-%b-%Y"),SC.template)
SC.template = gsub("<prj.nm>",SC.set$rep[SC.set$find == "<prj.nm>"],SC.template)
SC.template = gsub("<site.nm>",SC.set$rep[SC.set$find == "<site.nm>"],SC.template)
#--- Read meteorological data
met.dt      = read.csv(met.dt.fn, as.is = T)
#--- Add project name as station name
met.dt$station = paste0("\'",SC.set$rep[SC.set$find == "<prj.nm>"],"\'")
#--- Order to swap template
met.dt.swap  = met.dt[,swap.met.order]
#--- Add "." to real values
for(c in real.col){
met.dt.swap[,c] = format(as.numeric(met.dt.swap[,c]), nsmall = 1)
}
#--- number of years
l.yr = unique(met.dt.swap$yyyy)
for(yr in l.yr){
yr.lab = substr(as.character(yr),2,4)
write(SC.template,file = paste0(SC.outpath,"\\",SC.outfn,".",yr.lab))
write.fwf(met.dt.swap[met.dt.swap$yyyy == yr,],
file = paste0(SC.outpath,"\\",SC.outfn,".",yr.lab),
sep = ",",
append = T,
colnames = F)
}
}
SimMet.SWAP(SC.set.fn,
met.dt.fn,
SC.outpath,
SC.outfn)
met.dt.swap[,c]
#--- Template header
SC.template =c(
"* Source of data    : <prj.nm> - <site.nm>",
"* File content      : Input weather file for Swap 3.2 (www.swap.alterra.nl)",
"* File generated by : R-Script ",
"* File generated at : <date_now>",
"station,DD,MM,YYYY,Rad,Tmin,Tmax,Rain,Wind,Hum,etref")
#--- Set Column width and SAMUCA's meteorological variables and order
swap.met.order = c("station","dd","mm","yyyy","srad_kj","tmin","tmax","rain","wind","ea","etref")
real.col = c("srad_kj","tmin","tmax","rain","wind","ea","etref")
#--- include date
SC.template = gsub("<date_now>",format(Sys.Date(), "%d-%b-%Y"),SC.template)
SC.template = gsub("<prj.nm>",SC.set$rep[SC.set$find == "<prj.nm>"],SC.template)
SC.template = gsub("<site.nm>",SC.set$rep[SC.set$find == "<site.nm>"],SC.template)
#--- Read meteorological data
met.dt      = read.csv(met.dt.fn, as.is = T)
#--- Add project name as station name
met.dt$station = paste0("\'",SC.set$rep[SC.set$find == "<prj.nm>"],"\'")
#--- Order to swap template
met.dt.swap  = met.dt[,swap.met.order]
real.col
format(as.numeric(met.dt.swap[,c]), nsmall = 1)
as.numeric(met.dt.swap[,c])
as.numeric(met.dt.swap[,c])
met.dt.swap[,c]
format(as.numeric(met.dt.swap[,c]), nsmall = 1)
met.dt.swap[,c][1]
format(met.dt.swap[,c][1],nsmall = 1)
format(met.dt.swap[,c][20],nsmall = 1)
SimMet.SWAP  = function(SC.set.fn,
met.dt.fn,
SC.outpath,
SC.outfn){
#--------------------------------------------------------#
#------ Create Meteorological File for SAMUCA -----------#
#--------------------------------------------------------#
#   SC.template.fn  Control File Template "Path\\name.ctl"
#   C.set.fn        Control File Settings "Path\\file.csv"
#   SC.outpath      Output Control File Path
#   SC.outfn        Output Control Filename
#
#   -Settings.csv
#   File .csv must contain 7 columns:
#   find      target string on template
#   rep       replacement value
#   justify   justify format (r = right, l = left, c = centre)
#   width     character size of replecement
#   type      type of value (c = character, i = integer, r = real) Note: Logical = character
#   digits    maximun number of digits including character (More info in: ?format())
#   nsmall    minimun number of digits
#--------------------------------------------------------#
#if(missing(SC.template.fn)){stop("Argument SC.template.fn is missing for SimControl function")}
if(missing(SC.set.fn)){stop("Argument SC.set.fn is missing for SimControl function")}
if(missing(SC.outpath)){stop("Argument SC.outpath is missing for SimControl function")}
if(missing(SC.outfn)){stop("Argument SC.outfn is missing for SimControl function")}
#--- Read Template Settings file (csv)
SC.set      = read.csv(SC.set.fn, as.is = T)
#--- Template header
SC.template =c(
"* Source of data    : <prj.nm> - <site.nm>",
"* File content      : Input weather file for Swap 3.2 (www.swap.alterra.nl)",
"* File generated by : R-Script ",
"* File generated at : <date_now>",
"station,DD,MM,YYYY,Rad,Tmin,Tmax,Rain,Wind,Hum,etref")
#--- Set Column width and SAMUCA's meteorological variables and order
swap.met.order = c("station","dd","mm","yyyy","srad_kj","tmin","tmax","rain","wind","ea","etref")
real.col = c("srad_kj","tmin","tmax","rain","wind","ea","etref")
#--- include date
SC.template = gsub("<date_now>",format(Sys.Date(), "%d-%b-%Y"),SC.template)
SC.template = gsub("<prj.nm>",SC.set$rep[SC.set$find == "<prj.nm>"],SC.template)
SC.template = gsub("<site.nm>",SC.set$rep[SC.set$find == "<site.nm>"],SC.template)
#--- Read meteorological data
met.dt      = read.csv(met.dt.fn, as.is = T)
#--- Add project name as station name
met.dt$station = paste0("\'",SC.set$rep[SC.set$find == "<prj.nm>"],"\'")
#--- Order to swap template
met.dt.swap  = met.dt[,swap.met.order]
#--- Add "." to real values
for(c in real.col){
met.dt.swap[,c] = format(as.numeric(met.dt.swap[,c]), nsmall = 1, digits = 2)
}
#--- number of years
l.yr = unique(met.dt.swap$yyyy)
for(yr in l.yr){
yr.lab = substr(as.character(yr),2,4)
write(SC.template,file = paste0(SC.outpath,"\\",SC.outfn,".",yr.lab))
write.fwf(met.dt.swap[met.dt.swap$yyyy == yr,],
file = paste0(SC.outpath,"\\",SC.outfn,".",yr.lab),
sep = ",",
append = T,
colnames = F)
}
}
SimMet.SWAP(SC.set.fn,
met.dt.fn,
SC.outpath,
SC.outfn)
#--- Create Meteorological
SC.set.fn = paste0(wd.rsam,"/sim_db/weather/met_control_seq_f1_s1.csv")
met.dt.fn = paste0(wd.rsam,"/sim_db/weather/met_data_f1.csv")
SC.outpath = wd.model
SC.outfn   = "SEQ_F1_S1"
SimMet.SWAP(SC.set.fn,
met.dt.fn,
SC.outpath,
SC.outfn)
if(use.debug){
#--- Update .exe
file.copy(paste0(wd.debug,"/",samuca.exe),
wd.model, overwrite = T)
}
setwd(wd.model)
system(samuca.exe)
#--- Output names
plan.out.fn = paste0(wd.model,"/Plant_SWAP-SAMUCA_PIRA.out")
atmo.out.fn = paste0(wd.model,"/result.wba")
soil.out.fn = paste0(wd.model,"/result.vap")
stre.out.fn = paste0(wd.model,"/result.str")
incr.out.fn = paste0(wd.model,"/result.inc")
#--- Read outputs
plan.out = read.plan.SWAP.out(plan.out.fn)
atmo.out = read.atmo.SWAP.out(atmo.out.fn)
soil.out = read.soil.SWAP.out(soil.out.fn)
stre.out = read.stre.SWAP.out(stre.out.fn)
incr.out = read.incr.SWAP.out(incr.out.fn)
#--- Evapotranspiration
incr.out$et.pot = incr.out$Tpot + incr.out$Epot
incr.out$et.act = incr.out$Tact + incr.out$Eact
#--- plant
id.vec   = c("das","year","doy","sim.id")
plan.var = c("dw.st","dw.su","fw.st","pol","lai","till","p.ht","n.gl","swface","swfacp")
plan.df = melt(plan.out,
id.vars = colnames(plan.out)[colnames(plan.out) %in% id.vec],
measure.vars = plan.var)
#--- atmosphere
id.vec   = c("das","year","doy","sim.id")
incr.var = c("Tpot","Tact","Epot","Eact","et.pot", "et.act")
incr.df = melt(incr.out,
id.vars = colnames(incr.out)[colnames(incr.out) %in% id.vec],
measure.vars = incr.var)
soil.dp.vec = c(-10,-14.0,-31.5,-62,-90,-130)
soil.df           = soil.out
soil.df$value     = soil.df$wcontent
soil.df$variable  = as.factor(soil.df$depth)
soil.df = soil.df[soil.df$depth %in% soil.dp.vec,]
#--- temperature
temp.df           = soil.out
temp.df$value     = temp.df$temp
temp.df$variable  = as.factor(temp.df$depth)
temp.df = temp.df[temp.df$depth %in% soil.dp.vec,]
#--- ggplot function
gg.fun = function(df){
gg.obj =
ggplot(df, aes(x = das, y = value)) +
geom_line(colour = "blue") +
facet_wrap(variable~.,
scales = "free") +
theme_bw()
return(gg.obj)
}
#--- list dataframe
l.df = list(plan.df,
incr.df,
soil.df,
temp.df)
#--- run all ggplots
ggplots = lapply(l.df, gg.fun)
#--- check results
ggplots[[1]]  # plant
ggplots[[2]]  # atmo
#--- check results
ggplots[[1]]  # plant
